<?php

/**
 * @file
 * Integrates with PayPal Checkout.
 */

define('UC_PAYPAL_CHECKOUT_DEFAULT_BUTTON_STYLE',
<<<EOD
{
  "layout": "horizontal",
  "fundingicons": true
}
EOD
);

define('UC_PAYPAL_CHECKOUT_ALLOWED_FUNDING', drupal_map_assoc(array(
  'CARD',
  'CREDIT',
  'VENMO',
  'ELV',
  'EPS',
  'BANCONTACT',
  'GIROPAY',
  'IDEAL',
  'MYBANK',
  'P24',
  'SOFORT',
  'ZIMPLER',
)));

/**
 * Implements hook_menu().
 */
function uc_paypal_checkout_menu() {
  $items = array();

  $items['uc_paypal_checkout/payment-create'] = array(
    'title' => 'Create PayPal payment',
    'description' => 'Creates a PayPal payment with the PayPal Checkout API.',
    'page callback' => 'uc_paypal_checkout_create_payment',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_paypal_checkout.pages.inc',
  );

  $items['uc_paypal_checkout/payment-execute'] = array(
    'title' => 'Execute a PayPal payment',
    'description' => 'Executes a PayPal payment with the PayPal Checkout API.',
    'page callback' => 'uc_paypal_checkout_execute_payment',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_paypal_checkout.pages.inc',
  );

  $items['uc_paypal_checkout/payment-failed'] = array(
    'title' => 'Handle a failed payment',
    'page callback' => 'uc_paypal_checkout_payment_failed',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_paypal_checkout.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_uc_payment_method().
 */
function uc_paypal_checkout_uc_payment_method() {
  $methods = array();

  $methods[] = array(
    'id' => 'paypal_checkout',
    'name' => t('PayPal Checkout'),
    'title' => t('PayPal Checkout'),
    'review' => t('PayPal Checkout'),
    'desc' => t('Complete orders through PayPal Checkout.'),
    'callback' => 'uc_paypal_checkout_payment_method',
    'weight' => 1,
    'checkout' => FALSE,
    'no_gateway' => TRUE,
  );

  return $methods;
}

/**
 * Handles the PayPal Checkout payment method.
 */
function uc_paypal_checkout_payment_method($op, &$order) {
  switch ($op) {
    case 'settings':
      $form['api'] = array(
        '#type' => 'fieldset',
        '#title' => t('PayPal Checkout REST API settings'),
      );
      $form['api']['uc_paypal_checkout_api_url'] = array(
        '#type' => 'textfield',
        '#title' => t('PayPal Checkout API URL'),
        '#required' => TRUE,
        '#description' => t('The URL to the PayPal Checkout REST API including version number (example: https://api.sandbox.paypal.com/v1).'),
        '#default_value' => variable_get('uc_paypal_checkout_api_url', ''),
      );
      $form['api']['uc_paypal_checkout_api_env'] = array(
        '#type' => 'radios',
        '#options' => array(
          'sandbox' => 'sandbox',
          'production' => 'production',
        ),
        '#title' => t('Environment'),
        '#default_value' => variable_get('uc_paypal_checkout_api_env', 'sandbox'),
      );
      $form['api']['uc_paypal_checkout_api_client'] = array(
        '#type' => 'textfield',
        '#title' => t('Client ID'),
        '#required' => TRUE,
        '#default_value' => variable_get('uc_paypal_checkout_api_client', ''),
      );
      $form['api']['uc_paypal_checkout_api_secret'] = array(
        '#type' => 'textfield',
        '#title' => t('Secret'),
        '#required' => TRUE,
        '#default_value' => variable_get('uc_paypal_checkout_api_secret', ''),
      );
      $form['api']['uc_paypal_checkout_api_log_requests'] = array(
        '#type' => 'checkbox',
        '#title' => t('Log API requests for debugging'),
        '#default_value' => variable_get('uc_paypal_checkout_api_log_requests', 0),
      );
      $form['uc_paypal_checkout_locale'] = array(
        '#type' => 'textfield',
        '#title' => t('Locale'),
        '#description' => t('The locale code of the country and language to use when displaying the button.'),
        '#default_value' => variable_get('uc_paypal_checkout_button_locale', 'en_US'),
      );
      $form['api']['uc_paypal_checkout_allowed_funding'] = array(
        '#type' => 'checkboxes',
        '#options' => array(
          'CARD' => t('Card'),
          'CREDIT' => t('Credit'),
          'VENMO' => t('Venmo'),
          'ELV' => t('ELV'),
          'EPS' => t('EPS'),
          'BANCONTACT' => t('Bancontact'),
          'GIROPAY' => t('GiroPay'),
          'IDEAL' => t('iDEAL'),
          'MYBANK' => t('MyBank'),
          'P24' => t('Przelewy24'),
          'SOFORT' => t('Sofort'),
          'ZIMPLER' => t('Zimpler'),
        ),
        '#title' => t('Allowed funding sources'),
        '#default_value' => variable_get('uc_paypal_checkout_allowed_funding', UC_PAYPAL_CHECKOUT_ALLOWED_FUNDING),
      );
      $form['uc_paypal_checkout_use_paypal_billing_address'] = array(
        '#type' => 'checkbox',
        '#title' => t('Use PayPal shipping address as billing address'),
        '#description' => t('When checked, the billing information will be populated from the user\'s PayPal account and the billing pane on the checkout page will be disabled.'),
        '#default_value' => variable_get('uc_paypal_checkout_use_paypal_billing_address', 0),
      );
      $form['uc_paypal_checkout_button_style'] = array(
        '#type' => 'textarea',
        '#title' => t('Button Style'),
        '#element_validate' => array('uc_paypal_checkout_validate_json'),
        '#default_value' => variable_get('uc_paypal_checkout_button_style', UC_PAYPAL_CHECKOUT_DEFAULT_BUTTON_STYLE),
        '#description' => t(
          'Enter valid JSON containing button style configuration properties. See the !link for documentation concerning supported configuration properties. %warning',
          array(
            '!link' => l(t('button styles documentation'), 'https://developer.paypal.com/docs/checkout/how-to/customize-button/#button-styles'),
            '%warning' => 'WARNING: some configuration options are not compatible. If the PayPal Checkout button disappears after a configuration change, this is likely the reason.',
          )
        ),
      );
      $form['uc_paypal_checkout_override_config'] = array(
        '#type' => 'textarea',
        '#title' => t('Advanced Configuration Override'),
        '#element_validate' => array('uc_paypal_checkout_validate_json'),
        '#default_value' => variable_get('uc_paypal_checkout_override_config'),
        '#description' => t(
          'Enter valid JSON containing any configuration properties supported in the !link. Configuration properties entered here will override configuration entered in the above fields. %warning',
          array(
            '!link' => l(t('button customization documentation'), 'https://developer.paypal.com/docs/checkout/how-to/customize-button'),
            '%warning' => 'WARNING: some configuration options are not compatible. If the PayPal Checkout button disappears after a configuration change, this is likely the reason.',
          )
        ),
      );

      return $form;
  }
}

/**
 * Form element validation which ensures the element's value is a valid JSON string.
 */
function uc_paypal_checkout_validate_json($element) {
  if (!empty($element['#value']) && is_null(json_decode($element['#value']))) {
    form_error($element, t('You must enter valid JSON'));
  }
}

/**
 * Gets the list of allowed funding methods for the PayPal Checkout button.
 */
function uc_paypal_checkout_get_allowed_funding() {
  $allowed = variable_get('uc_paypal_checkout_allowed_funding', UC_PAYPAL_CHECKOUT_ALLOWED_FUNDING);
  return array_reduce(
    array_keys($allowed),
    function ($acc, $value) use ($allowed) {
      if ($allowed[$value] !== 0) {
        $acc[] = $value;
      }
      return $acc;
    },
    []
  );
}

/**
 * Gets the list of disallowed funding methods for the PayPal Checkout button.
 */
function uc_paypal_checkout_get_disallowed_funding() {
  $allowed = variable_get('uc_paypal_checkout_allowed_funding', UC_PAYPAL_CHECKOUT_ALLOWED_FUNDING);
  return array_reduce(
    array_keys($allowed),
    function ($acc, $value) use ($allowed) {
      if ($allowed[$value] === 0) {
        $acc[] = $value;
      }
      return $acc;
    },
    []
  );
}

/**
 * Generates PayPal Checkout button settings from configuration.
 */
function uc_paypal_checkout_get_settings() {
  $nonEmptyOrDefault = function ($name, $default) {
    $value = trim(variable_get($name, $default));
    return empty($value) ? $default : $value;
  };
  return array(
    'overrideConfig' => json_decode($nonEmptyOrDefault('uc_paypal_checkout_override_config', '{}')),
    'env' => variable_get('uc_paypal_checkout_api_env', 'sandbox'),
    'locale' => variable_get('uc_paypal_checkout_locale', 'en_US'),
    'buttonStyle' => json_decode($nonEmptyOrDefault('uc_paypal_checkout_button_style', UC_PAYPAL_CHECKOUT_DEFAULT_BUTTON_STYLE)),
    'allowedFunding' => uc_paypal_checkout_get_allowed_funding(),
    'disallowedFunding' => uc_paypal_checkout_get_disallowed_funding(),
    'urls' => array(
      'error' => url('uc_paypal_checkout/payment-failed'),
      'cart' => url('cart'),
      'checkoutComplete' => url('cart/checkout/complete'),
      'paymentCreate' => url('uc_paypal_checkout/payment-create'),
      'paymentExecute' => url('uc_paypal_checkout/payment-execute'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter() for uc_cart_checkout_form().
 */
function uc_paypal_checkout_form_uc_cart_checkout_form_alter(&$form, &$form_state) {
  if (variable_get('uc_paypal_checkout_use_paypal_billing_address', 1)) {
    array_unshift($form['#validate'], 'uc_paypal_checkout_uc_cart_checkout_form_validate');
    if (
      (isset($form_state['values']['panes']['payment']['payment_method']) && $form_state['values']['panes']['payment']['payment_method'] === 'paypal_checkout')
      || $form['panes']['payment']['payment_method']['#default_value'] === 'paypal_checkout') {
      // Hide the billing pane fields which are not relevant if we're populating
      // the billing information from PayPal.
      $form['panes']['billing']['copy_address']['#access'] = FALSE;
      $form['panes']['billing']['select_address']['#access'] = FALSE;
      $form['panes']['billing']['address']['#access'] = FALSE;
      $form['panes']['billing']['#description'] = t('Billing address will be automatically obtained from PayPal.');
    }

    // Override the payment method radio selection ajax call to re-write all the
    // panes. This way we can make necessary adjustments on the billing pane.
    $form['panes']['#prefix'] = '<div id="checkout-panes">';
    $form['panes']['#suffix'] = '</div>';
    $form['panes']['payment']['payment_method']['#ajax']['callback'] = 'uc_paypal_checkout_payment_details';
    $form['panes']['payment']['payment_method']['#ajax']['wrapper'] = 'checkout-panes';
  }
}

/**
 * Validation callback for uc_cart_checkout_form().
 */
function uc_paypal_checkout_uc_cart_checkout_form_validate($form, &$form_state) {
  if (
    (isset($form_state['values']['panes']['payment']['payment_method']) && $form_state['values']['panes']['payment']['payment_method'] === 'paypal_checkout')) {
    if (isset($form_state['values']['panes']['billing'])) {
      // Remove any form values/input having to do with the billing pane if
      // we're populating from PayPal.
      unset($form_state['values']['panes']['billing']);
      unset($form_state['input']['panes']['billing']);
    }
  }
}

/**
 * Ajax submission callback for the payment_method element on the uc_cart_checkout_form().
 */
function uc_paypal_checkout_payment_details(&$form, &$form_state) {
  // Return all of the panes.
  return $form['panes'];
}

/**
 * Implements hook_preprocess_uc_cart_checkout_review().
 */
function uc_paypal_checkout_preprocess_uc_cart_checkout_review(&$variables) {
  $order = uc_order_load(intval($_SESSION['cart_order']));
  if ($order->payment_method === 'paypal_checkout' && variable_get('uc_paypal_checkout_use_paypal_billing_address', 0)) {
    // Hide billing pane if we are obtaining the billing address from PayPal.
    $billing_pane = _uc_checkout_pane_list()['billing'];
    unset($variables['panes'][$billing_pane['title']]);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for uc_cart_checkout_review_form().
 */
function uc_paypal_checkout_form_uc_cart_checkout_review_form_alter(&$form, &$form_state, $form_id) {
  $order = uc_order_load(intval($_SESSION['cart_order']));

  if ($order->payment_method === 'paypal_checkout') {
    $form['actions']['submit']['#access'] = FALSE;
    $form['actions']['paypal_checkout'] = array(
      '#weight' => 999,
      '#markup' => '<div id="paypal-button"></div>',
      '#attached' => array(
        'js' => array(
          array(
            'data' => array(
              'ucPaypalCheckout' => uc_paypal_checkout_get_settings(),
            ),
            'type' => 'setting',
          ),
          array(
            'data' => 'https://www.paypalobjects.com/api/checkout.js',
            'type' => 'external',
          ),
          array(
            'data' => drupal_get_path('module', 'uc_paypal_checkout') . '/js/paypal-button.js',
            'type' => 'file',
          ),
        ),
      ),
    );
  }

  return $form;
}

/**
 * Makes a request to the PayPal REST API during the PayPal Checkout flow.
 *
 * @param string $path
 *   The URL path for the request excluding the API version (example:
 *   "/payments/payment").
 * @param string $method
 *   The HTTP method of the request.
 * @param array|object $body
 *   The body to send with the request.
 *
 * @return object
 *   The API response from the PayPal REST API.
 */
function uc_paypal_checkout_api_request($path, $method, $body) {
  $log_requests = variable_get('uc_paypal_checkout_api_log_requests', 0);

  if ($log_requests) {
    ob_start();
    $out = fopen('php://output', 'w');
  }

  $curl = curl_init();

  if ($log_requests) {
    curl_setopt($curl, CURLOPT_VERBOSE, TRUE);
    curl_setopt($curl, CURLOPT_STDERR, $out);
  }

  $options = array(
    CURLOPT_URL => variable_get('uc_paypal_checkout_api_url') . $path,
    CURLOPT_RETURNTRANSFER => TRUE,
    CURLOPT_ENCODING => "",
    CURLOPT_MAXREDIRS => 10,
    CURLOPT_TIMEOUT => 30,
    CURLOPT_HEADER => 1,
    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
    CURLOPT_CUSTOMREQUEST => $method,
    CURLOPT_USERPWD => variable_get('uc_paypal_checkout_api_client') . ':' . variable_get('uc_paypal_checkout_api_secret'),
    CURLOPT_HTTPHEADER => array(
      "Cache-Control: no-cache",
      "Content-Type: application/json",
    ),
  );

  if (isset($body) && !empty($body)) {
    $options[CURLOPT_POSTFIELDS] = json_encode($body);
  }

  curl_setopt_array($curl, $options);

  $response = curl_exec($curl);

  $header_len = curl_getinfo($curl, CURLINFO_HEADER_SIZE);
  $body = substr($response, $header_len);

  if ($log_requests) {
    fclose($out);
    $debug = ob_get_clean();
    watchdog(
      'uc_paypal_checkout',
      "Paypal API Request:<br>!debug<br><br>Paypal API Response:<br>!response",
      array(
        '!debug' => $debug,
        '!response' => $response
      ),
      WATCHDOG_DEBUG
    );
  }

  if ($error = curl_error($curl)) {
    watchdog('uc_paypal_checkout', '!error', array('!error' => $error), WATCHDOG_ERROR);
    drupal_goto('uc_paypal_checkout/payment-failed');
  }

  curl_close($curl);

  return $body;
}
